interface Node {
  id: ID!
}

input OperatorsStringEqILikeInput {
  eq: String
  ne: String
  iLike: String
  notILike: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PeopleConnection {
  pageInfo: PageInfo!
  edges: [PeopleEdge]
  count: Int
}

enum PeopleConnectionOrder {
  firstNameASC
  firstNameDESC
  lastNameASC
  lastNameDESC
  ageASC
  ageDESC
}

type PeopleEdge {
  node: Person
  cursor: String!
}

type Person implements Node {
  id: ID!
  firstName: String
  lastName: String
  email: String
  age: Int
  posts(after: String, first: Int, before: String, last: Int, orderBy: [PersonPostConnectionOrder]): PersonPostConnection
}

type PersonPostConnection {
  pageInfo: PageInfo!
  edges: [PersonPostEdge]
  count: Int
}

enum PersonPostConnectionOrder {
  ID
}

type PersonPostEdge {
  node: Post
  cursor: String!
}

input PersonWhereInput {
  firstName: OperatorsStringEqILikeInput
  lastName: OperatorsStringEqILikeInput
  _and: PersonWhereInput
  _or: [PersonWhereInput]
}

type Post implements Node {
  id: ID!
  title: String
  content: String
  tags: PostTagConnection
  tagNames: [String]
  person: Person
}

type PostsConnection {
  pageInfo: PageInfo!
  edges: [PostsEdge]
  count: Int
}

enum PostsConnectionOrder {
  ID
}

type PostsEdge {
  node: Post
  cursor: String!
}

type PostTagConnection {
  pageInfo: PageInfo!
  edges: [PostTagEdge]
  count: Int
}

type PostTagEdge {
  node: Tag
  cursor: String!
}

input PostWhereInput {
  title: OperatorsStringEqILikeInput
}

type RootType {
  viewer: Viewer
  node(id: ID!): Node
}

type Tag {
  id: ID!
  name: String
}

type Viewer {
  id: ID!
  people(after: String, first: Int, before: String, last: Int, orderBy: [PeopleConnectionOrder], where: PersonWhereInput): PeopleConnection
  posts(after: String, first: Int, before: String, last: Int, orderBy: [PostsConnectionOrder], where: PostWhereInput): PostsConnection
}
